version: '3.8'

# Docker secrets for sensitive data
secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  redis_password:
    file: ./secrets/redis_password.txt
  api_keys:
    file: ./secrets/api_keys.json
  ssl_cert:
    file: ./secrets/ssl/cert.pem
  ssl_key:
    file: ./secrets/ssl/key.pem

# Networks for service isolation
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  database:
    driver: bridge
    internal: true

# Volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local

services:
  # Nginx Reverse Proxy (exposed to internet)
  nginx:
    image: nginx:1.25-alpine
    container_name: flourish_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./nginx/security-headers.conf:/etc/nginx/security-headers.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro
    secrets:
      - ssl_cert
      - ssl_key
    networks:
      - frontend
    depends_on:
      - backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.secure
    container_name: flourish_backend
    restart: always
    expose:
      - "8000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://flourish_user@postgres:5432/flourish_db
    secrets:
      - db_password
      - jwt_secret
      - redis_password
      - api_keys
    volumes:
      - app_logs:/app/logs
    networks:
      - frontend
      - backend
      - database
    depends_on:
      - postgres
      - redis
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flourish_postgres
    restart: always
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=flourish_db
      - POSTGRES_USER=flourish_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --data-checksums
    secrets:
      - db_password
      - db_root_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - database
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flourish_user -d flourish_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flourish_redis
    restart: always
    expose:
      - "6379"
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    command: >
      redis-server
      --requirepass /run/secrets/redis_password
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AI Services (isolated)
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.secure
    container_name: flourish_ai
    restart: always
    expose:
      - "8001"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
    secrets:
      - api_keys
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    user: "1000:1000"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: flourish_prometheus
    restart: always
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'

  # Log aggregation - Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: flourish_loki
    restart: always
    expose:
      - "3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - backend
    security_opt:
      - no-new-privileges:true
    command: -config.file=/etc/loki/local-config.yaml

  # Monitoring Dashboard - Grafana
  grafana:
    image: grafana/grafana:10.0.0
    container_name: flourish_grafana
    restart: always
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - backend
      - frontend
    security_opt:
      - no-new-privileges:true
    depends_on:
      - prometheus
      - loki