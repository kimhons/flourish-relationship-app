import React, { useState, useEffect } from 'react';
import { 
  Shield, AlertTriangle, CheckCircle, XCircle, Clock,
  Bug, Lock, Eye, Settings, Download, Upload, Filter,
  BarChart, TrendingUp, Calendar, User, Globe, Server
} from 'lucide-react';
import { 
  BarChart as RechartsBarChart, Bar, LineChart, Line, PieChart, Pie, Cell,
  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';

const VulnerabilityManagement = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);

  // Vulnerability data for dating app
  const vulnerabilities = [
    {
      id: 'VULN-2025-001',
      title: 'SQL Injection in User Search',
      description: 'Potential SQL injection vulnerability in user search functionality',
      severity: 'high',
      status: 'open',
      category: 'injection',
      cvss_score: 8.2,
      discovered_date: '2025-01-07',
      reported_by: 'Security Scan',
      affected_component: 'User Search API',
      location: '/api/users/search',
      remediation_effort: 'medium',
      business_impact: 'high',
      exploitability: 'medium',
      steps_to_reproduce: [
        'Navigate to user search page',
        'Enter malicious SQL payload in search field',
        'Submit search request',
        'Observe database error messages'
      ],
      remediation_steps: [
        'Implement parameterized queries',
        'Add input validation',
        'Update database access layer',
        'Conduct security testing'
      ]
    },
    {
      id: 'VULN-2025-002',
      title: 'Cross-Site Scripting (XSS) in Profile Bio',
      description: 'Stored XSS vulnerability in user profile bio field',
      severity: 'medium',
      status: 'in_progress',
      category: 'xss',
      cvss_score: 6.1,
      discovered_date: '2025-01-06',
      reported_by: 'Bug Bounty',
      affected_component: 'Profile Management',
      location: '/profile/edit',
      remediation_effort: 'low',
      business_impact: 'medium',
      exploitability: 'high',
      steps_to_reproduce: [
        'Edit user profile',
        'Insert JavaScript payload in bio field',
        'Save profile',
        'View profile to trigger XSS'
      ],
      remediation_steps: [
        'Implement output encoding',
        'Add Content Security Policy',
        'Sanitize user input',
        'Update frontend validation'
      ]
    },
    {
      id: 'VULN-2025-003',
      title: 'Insecure Direct Object Reference in Messages',
      description: 'Users can access other users\' private messages by manipulating message IDs',
      severity: 'critical',
      status: 'open',
      category: 'access_control',
      cvss_score: 9.1,
      discovered_date: '2025-01-05',
      reported_by: 'Internal Audit',
      affected_component: 'Messaging System',
      location: '/api/messages/{id}',
      remediation_effort: 'high',
      business_impact: 'critical',
      exploitability: 'low',
      steps_to_reproduce: [
        'Login as user A',
        'Note message ID from conversation',
        'Modify message ID in API request',
        'Access other users\' messages'
      ],
      remediation_steps: [
        'Implement proper authorization checks',
        'Add user context validation',
        'Update API security middleware',
        'Conduct access control review'
      ]
    },
    {
      id: 'VULN-2025-004',
      title: 'Weak Password Policy',
      description: 'Current password policy allows weak passwords that are easily guessable',
      severity: 'medium',
      status: 'resolved',
      category: 'authentication',
      cvss_score: 5.3,
      discovered_date: '2025-01-04',
      reported_by: 'Security Review',
      affected_component: 'Authentication System',
      location: '/auth/register',
      remediation_effort: 'low',
      business_impact: 'medium',
      exploitability: 'medium',
      steps_to_reproduce: [
        'Navigate to registration page',
        'Enter weak password (e.g., "123456")',
        'Successfully create account',
        'Password accepted without complexity requirements'
      ],
      remediation_steps: [
        'Implement strong password policy',
        'Add password complexity validation',
        'Update user interface',
        'Notify existing users to update passwords'
      ]
    },
    {
      id: 'VULN-2025-005',
      title: 'Unencrypted Data Transmission',
      description: 'Some API endpoints transmit sensitive data without proper encryption',
      severity: 'high',
      status: 'in_progress',
      category: 'encryption',
      cvss_score: 7.5,
      discovered_date: '2025-01-03',
      reported_by: 'Penetration Test',
      affected_component: 'API Gateway',
      location: '/api/user/sensitive-data',
      remediation_effort: 'medium',
      business_impact: 'high',
      exploitability: 'medium',
      steps_to_reproduce: [
        'Intercept network traffic',
        'Make API calls to sensitive endpoints',
        'Observe unencrypted data in transit',
        'Extract sensitive information'
      ],
      remediation_steps: [
        'Enforce HTTPS for all endpoints',
        'Update API gateway configuration',
        'Implement end-to-end encryption',
        'Conduct security testing'
      ]
    },
    {
      id: 'VULN-2025-006',
      title: 'Session Fixation Vulnerability',
      description: 'Application does not regenerate session IDs after authentication',
      severity: 'medium',
      status: 'open',
      category: 'session_management',
      cvss_score: 6.8,
      discovered_date: '2025-01-02',
      reported_by: 'Security Scan',
      affected_component: 'Session Management',
      location: '/auth/login',
      remediation_effort: 'low',
      business_impact: 'medium',
      exploitability: 'medium',
      steps_to_reproduce: [
        'Obtain session ID before login',
        'Login with valid credentials',
        'Verify session ID remains unchanged',
        'Potential for session hijacking'
      ],
      remediation_steps: [
        'Regenerate session ID after login',
        'Implement secure session handling',
        'Update authentication middleware',
        'Add session security headers'
      ]
    }
  ];

  // Vulnerability statistics
  const vulnerabilityStats = {
    total: 6,
    critical: 1,
    high: 2,
    medium: 3,
    low: 0,
    open: 3,
    in_progress: 2,
    resolved: 1,
    avg_resolution_time: '5.2 days',
    security_score: 78
  };

  // Vulnerability trends data
  const trendData = [
    { month: 'Jul', discovered: 8, resolved: 6, open: 12 },
    { month: 'Aug', discovered: 12, resolved: 10, open: 14 },
    { month: 'Sep', discovered: 6, resolved: 8, open: 12 },
    { month: 'Oct', discovered: 9, resolved: 7, open: 14 },
    { month: 'Nov', discovered: 11, resolved: 9, open: 16 },
    { month: 'Dec', discovered: 7, resolved: 12, open: 11 },
    { month: 'Jan', discovered: 6, resolved: 1, open: 16 }
  ];

  // Severity distribution data
  const severityData = [
    { name: 'Critical', value: 1, color: '#ef4444' },
    { name: 'High', value: 2, color: '#f97316' },
    { name: 'Medium', value: 3, color: '#eab308' },
    { name: 'Low', value: 0, color: '#22c55e' }
  ];

  // Category distribution data
  const categoryData = [
    { category: 'Injection', count: 1, percentage: 16.7 },
    { category: 'XSS', count: 1, percentage: 16.7 },
    { category: 'Access Control', count: 1, percentage: 16.7 },
    { category: 'Authentication', count: 1, percentage: 16.7 },
    { category: 'Encryption', count: 1, percentage: 16.7 },
    { category: 'Session Management', count: 1, percentage: 16.7 }
  ];

  // Security tools and scanners
  const securityTools = [
    {
      name: 'OWASP ZAP',
      type: 'Dynamic Analysis',
      status: 'active',
      last_scan: '2025-01-07 02:00',
      vulnerabilities_found: 3,
      scan_frequency: 'Daily'
    },
    {
      name: 'SonarQube',
      type: 'Static Analysis',
      status: 'active',
      last_scan: '2025-01-07 01:30',
      vulnerabilities_found: 2,
      scan_frequency: 'On Commit'
    },
    {
      name: 'Snyk',
      type: 'Dependency Scan',
      status: 'active',
      last_scan: '2025-01-06 23:45',
      vulnerabilities_found: 1,
      scan_frequency: 'Weekly'
    },
    {
      name: 'Nessus',
      type: 'Infrastructure Scan',
      status: 'active',
      last_scan: '2025-01-06 20:00',
      vulnerabilities_found: 0,
      scan_frequency: 'Monthly'
    }
  ];

  const getFilteredVulnerabilities = () => {
    let filtered = vulnerabilities;
    
    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }
    
    if (statusFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.status === statusFilter);
    }
    
    return filtered;
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-red-600 bg-red-100';
      case 'high': return 'text-orange-600 bg-orange-100';
      case 'medium': return 'text-yellow-600 bg-yellow-100';
      case 'low': return 'text-green-600 bg-green-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'open': return 'text-red-600 bg-red-100';
      case 'in_progress': return 'text-blue-600 bg-blue-100';
      case 'resolved': return 'text-green-600 bg-green-100';
      case 'closed': return 'text-gray-600 bg-gray-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'open': return <XCircle className="w-4 h-4" />;
      case 'in_progress': return <Clock className="w-4 h-4" />;
      case 'resolved': return <CheckCircle className="w-4 h-4" />;
      case 'closed': return <CheckCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const getCVSSColor = (score) => {
    if (score >= 9.0) return 'text-red-600';
    if (score >= 7.0) return 'text-orange-600';
    if (score >= 4.0) return 'text-yellow-600';
    return 'text-green-600';
  };

  const updateVulnerabilityStatus = (vulnId, newStatus) => {
    console.log(`Updating vulnerability ${vulnId} to status: ${newStatus}`);
    // In a real app, this would update the vulnerability status
  };

  const exportVulnerabilities = () => {
    console.log('Exporting vulnerability report...');
    // In a real app, this would generate and download a report
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-50 p-6">
      {/* Header */}
      <div className="mb-8">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center gap-3">
              <Bug className="w-8 h-8 text-red-600" />
              Vulnerability Management
            </h1>
            <p className="text-gray-600">
              Track, manage, and remediate security vulnerabilities across the dating platform
            </p>
          </div>
          
          <div className="flex flex-wrap items-center gap-3">
            <select
              value={severityFilter}
              onChange={(e) => setSeverityFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
            
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="open">Open</option>
              <option value="in_progress">In Progress</option>
              <option value="resolved">Resolved</option>
              <option value="closed">Closed</option>
            </select>
            
            <button 
              onClick={exportVulnerabilities}
              className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              <Download className="w-4 h-4" />
              Export Report
            </button>
            
            <button className="flex items-center gap-2 px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
              <Upload className="w-4 h-4" />
              Import Scan
            </button>
          </div>
        </div>
      </div>

      {/* Vulnerability Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4 mb-8">
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-gray-900">{vulnerabilityStats.total}</div>
          <div className="text-sm text-gray-600">Total Vulnerabilities</div>
        </div>
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-red-600">{vulnerabilityStats.critical}</div>
          <div className="text-sm text-gray-600">Critical</div>
        </div>
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-orange-600">{vulnerabilityStats.high}</div>
          <div className="text-sm text-gray-600">High</div>
        </div>
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-yellow-600">{vulnerabilityStats.medium}</div>
          <div className="text-sm text-gray-600">Medium</div>
        </div>
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-blue-600">{vulnerabilityStats.avg_resolution_time}</div>
          <div className="text-sm text-gray-600">Avg Resolution</div>
        </div>
        <div className="bg-white rounded-lg p-4 border border-gray-200">
          <div className="text-2xl font-bold text-green-600">{vulnerabilityStats.security_score}</div>
          <div className="text-sm text-gray-600">Security Score</div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'dashboard', name: 'Dashboard', icon: BarChart },
              { id: 'vulnerabilities', name: 'Vulnerabilities', icon: Bug },
              { id: 'scans', name: 'Security Scans', icon: Shield },
              { id: 'reports', name: 'Reports', icon: Download }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? 'border-red-500 text-red-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                {tab.name}
              </button>
            ))}
          </nav>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar */}
        <div className="lg:col-span-1 space-y-6">
          {/* Quick Stats */}
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">Quick Stats</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Open Issues</span>
                <span className="font-semibold text-red-600">{vulnerabilityStats.open}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">In Progress</span>
                <span className="font-semibold text-blue-600">{vulnerabilityStats.in_progress}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-gray-600">Resolved</span>
                <span className="font-semibold text-green-600">{vulnerabilityStats.resolved}</span>
              </div>
              <div className="border-t border-gray-200 pt-3">
                <div className="flex justify-between">
                  <span className="text-sm font-medium text-gray-700">Security Score</span>
                  <span className="font-bold text-green-600">{vulnerabilityStats.security_score}/100</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                  <div 
                    className="bg-green-500 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${vulnerabilityStats.security_score}%` }}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Security Tools */}
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">Security Tools</h3>
            <div className="space-y-3">
              {securityTools.map((tool, index) => (
                <div key={index} className="p-3 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-medium text-gray-900 text-sm">{tool.name}</span>
                    <div className={`w-2 h-2 rounded-full ${tool.status === 'active' ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                  </div>
                  <div className="text-xs text-gray-600 mb-1">{tool.type}</div>
                  <div className="text-xs text-gray-500">Last: {tool.last_scan}</div>
                  <div className="text-xs text-gray-500">Found: {tool.vulnerabilities_found} issues</div>
                </div>
              ))}
            </div>
          </div>

          {/* Category Breakdown */}
          <div className="bg-white rounded-lg p-6 border border-gray-200">
            <h3 className="font-semibold text-gray-900 mb-4">Vulnerability Categories</h3>
            <div className="space-y-2">
              {categoryData.map((category, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                  <span className="text-sm text-gray-700">{category.category}</span>
                  <span className="text-sm font-semibold text-gray-900">{category.count}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-3 space-y-6">
          {activeTab === 'dashboard' && (
            <>
              {/* Vulnerability Trends */}
              <div className="bg-white rounded-lg p-6 border border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Vulnerability Trends</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={trendData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Line type="monotone" dataKey="discovered" stroke="#ef4444" strokeWidth={2} name="Discovered" />
                    <Line type="monotone" dataKey="resolved" stroke="#22c55e" strokeWidth={2} name="Resolved" />
                    <Line type="monotone" dataKey="open" stroke="#f97316" strokeWidth={2} name="Open" />
                  </LineChart>
                </ResponsiveContainer>
              </div>

              {/* Severity Distribution */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white rounded-lg p-6 border border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Severity Distribution</h3>
                  <ResponsiveContainer width="100%" height={250}>
                    <PieChart>
                      <Pie
                        data={severityData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, value }) => `${name}: ${value}`}
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {severityData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>

                <div className="bg-white rounded-lg p-6 border border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Top Risk Areas</h3>
                  <div className="space-y-4">
                    <div className="p-3 bg-red-50 border border-red-200 rounded-lg">
                      <div className="font-medium text-red-900">Access Control</div>
                      <div className="text-sm text-red-700">Critical vulnerability in messaging system</div>
                      <div className="text-xs text-red-600 mt-1">CVSS: 9.1</div>
                    </div>
                    <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                      <div className="font-medium text-orange-900">SQL Injection</div>
                      <div className="text-sm text-orange-700">High risk in user search functionality</div>
                      <div className="text-xs text-orange-600 mt-1">CVSS: 8.2</div>
                    </div>
                    <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                      <div className="font-medium text-yellow-900">Data Encryption</div>
                      <div className="text-sm text-yellow-700">Unencrypted data transmission</div>
                      <div className="text-xs text-yellow-600 mt-1">CVSS: 7.5</div>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )}

          {activeTab === 'vulnerabilities' && (
            <div className="space-y-6">
              {getFilteredVulnerabilities().map((vulnerability) => (
                <div key={vulnerability.id} className="bg-white rounded-lg p-6 border border-gray-200">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-3">
                      <h3 className="text-lg font-semibold text-gray-900">{vulnerability.title}</h3>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.severity)}`}>
                        {vulnerability.severity}
                      </span>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${getStatusColor(vulnerability.status)}`}>
                        {getStatusIcon(vulnerability.status)}
                        {vulnerability.status.replace('_', ' ')}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className={`text-sm font-semibold ${getCVSSColor(vulnerability.cvss_score)}`}>
                        CVSS: {vulnerability.cvss_score}
                      </span>
                      <button 
                        onClick={() => setSelectedVulnerability(selectedVulnerability === vulnerability.id ? null : vulnerability.id)}
                        className="px-3 py-1 border border-gray-300 text-gray-700 text-sm rounded hover:bg-gray-50"
                      >
                        {selectedVulnerability === vulnerability.id ? 'Hide' : 'Details'}
                      </button>
                    </div>
                  </div>
                  
                  <p className="text-gray-600 mb-4">{vulnerability.description}</p>
                  
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <div className="text-sm text-gray-500">Component</div>
                      <div className="font-semibold text-gray-900">{vulnerability.affected_component}</div>
                    </div>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <div className="text-sm text-gray-500">Location</div>
                      <div className="font-semibold text-gray-900">{vulnerability.location}</div>
                    </div>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <div className="text-sm text-gray-500">Discovered</div>
                      <div className="font-semibold text-gray-900">{vulnerability.discovered_date}</div>
                    </div>
                    <div className="p-3 bg-gray-50 rounded-lg">
                      <div className="text-sm text-gray-500">Reported By</div>
                      <div className="font-semibold text-gray-900">{vulnerability.reported_by}</div>
                    </div>
                  </div>

                  {selectedVulnerability === vulnerability.id && (
                    <div className="border-t border-gray-200 pt-4 space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Risk Assessment</h4>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Business Impact:</span>
                              <span className="font-medium">{vulnerability.business_impact}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Exploitability:</span>
                              <span className="font-medium">{vulnerability.exploitability}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Remediation Effort:</span>
                              <span className="font-medium">{vulnerability.remediation_effort}</span>
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Steps to Reproduce</h4>
                          <ol className="text-sm text-gray-600 space-y-1">
                            {vulnerability.steps_to_reproduce.map((step, index) => (
                              <li key={index} className="flex">
                                <span className="mr-2">{index + 1}.</span>
                                <span>{step}</span>
                              </li>
                            ))}
                          </ol>
                        </div>
                        
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Remediation Steps</h4>
                          <ol className="text-sm text-gray-600 space-y-1">
                            {vulnerability.remediation_steps.map((step, index) => (
                              <li key={index} className="flex">
                                <span className="mr-2">{index + 1}.</span>
                                <span>{step}</span>
                              </li>
                            ))}
                          </ol>
                        </div>
                      </div>
                      
                      <div className="flex gap-2 pt-4">
                        <button 
                          onClick={() => updateVulnerabilityStatus(vulnerability.id, 'in_progress')}
                          className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                        >
                          Start Fix
                        </button>
                        <button 
                          onClick={() => updateVulnerabilityStatus(vulnerability.id, 'resolved')}
                          className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                        >
                          Mark Resolved
                        </button>
                        <button className="px-3 py-1 border border-gray-300 text-gray-700 text-sm rounded hover:bg-gray-50">
                          Assign
                        </button>
                        <button className="px-3 py-1 border border-gray-300 text-gray-700 text-sm rounded hover:bg-gray-50">
                          Add Comment
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}

          {activeTab === 'scans' && (
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Security Scan Results</h3>
              <div className="space-y-4">
                {securityTools.map((tool, index) => (
                  <div key={index} className="p-4 border border-gray-200 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <h4 className="font-medium text-gray-900">{tool.name}</h4>
                        <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                          {tool.type}
                        </span>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          tool.status === 'active' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-700'
                        }`}>
                          {tool.status}
                        </span>
                      </div>
                      <button className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                        Run Scan
                      </button>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="text-gray-500">Last Scan:</span>
                        <span className="ml-1 font-medium">{tool.last_scan}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">Vulnerabilities Found:</span>
                        <span className="ml-1 font-medium text-red-600">{tool.vulnerabilities_found}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">Frequency:</span>
                        <span className="ml-1 font-medium">{tool.scan_frequency}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'reports' && (
            <div className="bg-white rounded-lg p-6 border border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Vulnerability Reports</h3>
              <div className="space-y-4">
                <div className="p-4 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-gray-900">Monthly Security Report - January 2025</h4>
                    <button className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                      <Download className="w-3 h-3" />
                      Download
                    </button>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">Comprehensive security assessment and vulnerability analysis</p>
                  <div className="text-xs text-gray-500">Generated: 2025-01-07 | 45 pages | PDF</div>
                </div>
                
                <div className="p-4 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-gray-900">Executive Security Summary - Q4 2024</h4>
                    <button className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                      <Download className="w-3 h-3" />
                      Download
                    </button>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">High-level security metrics and risk assessment</p>
                  <div className="text-xs text-gray-500">Generated: 2025-01-01 | 12 pages | PDF</div>
                </div>
                
                <div className="p-4 border border-gray-200 rounded-lg">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-gray-900">Penetration Test Results - December 2024</h4>
                    <button className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                      <Download className="w-3 h-3" />
                      Download
                    </button>
                  </div>
                  <p className="text-sm text-gray-600 mb-2">External penetration testing findings and recommendations</p>
                  <div className="text-xs text-gray-500">Generated: 2024-12-20 | 67 pages | PDF</div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityManagement;

