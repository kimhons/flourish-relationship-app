name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: flourish/backend
  ECR_REPOSITORY_FRONTEND: flourish/frontend
  ECR_REPOSITORY_AI: flourish/ai-services
  ECS_CLUSTER: flourish-production
  ECS_SERVICE_BACKEND: flourish-backend
  ECS_SERVICE_AI: flourish-ai

jobs:
  # Security and Vulnerability Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: flourish_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-ai.txt
          pip install pytest pytest-cov pytest-mock pytest-asyncio

      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/flourish_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV

      - name: Run database migrations
        run: |
          cd backend
          flask db upgrade

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Mobile Tests
  test-mobile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: |
          cd mobile
          npm ci

      - name: Run mobile tests
        run: |
          cd mobile
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  # End-to-End Tests
  test-e2e:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: flourish_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && pip install -r requirements.txt
          cd ../frontend && npm ci

      - name: Start backend server
        run: |
          cd backend
          flask run --host=0.0.0.0 --port=5000 &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/flourish_test
          REDIS_URL: redis://localhost:6379/0
          FLASK_ENV: testing

      - name: Start frontend server
        run: |
          cd frontend
          npm run dev -- --host --port 3000 &
          sleep 15

      - name: Install Playwright
        run: npx playwright install

      - name: Run E2E tests
        run: |
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/

  # Performance Tests
  test-performance:
    runs-on: ubuntu-latest
    needs: [test-e2e]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run Load Tests with Artillery
        run: |
          npm install -g artillery
          artillery run tests/load/api-load-test.yml
          artillery run tests/load/frontend-load-test.yml

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [security-scan, test-backend, test-frontend, test-mobile, test-e2e]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f frontend/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

      - name: Build, tag, and push AI services image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ai-services/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG ./ai-services
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_AI:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_AI:latest

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster flourish-staging \
            --service flourish-backend-staging \
            --force-new-deployment

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster flourish-staging \
            --services flourish-backend-staging

      - name: Run staging health checks
        run: |
          # Wait for service to be healthy
          sleep 60
          
          # Health check
          curl -f https://staging.flourish-app.com/health || exit 1
          
          # Basic API test
          curl -f https://staging.flourish-app.com/api/v1/health || exit 1

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [deploy-staging, test-performance]
    environment: production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy backend to production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update task definition with new image
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition flourish-backend --query taskDefinition)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')
          NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          
          # Register new task definition
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION"
          
          # Update ECS service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_BACKEND \
            --task-definition flourish-backend

      - name: Deploy AI services to production
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update AI services
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE_AI \
            --force-new-deployment

      - name: Wait for deployment completion
        run: |
          # Wait for backend deployment
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND
          
          # Wait for AI services deployment
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_AI

      - name: Run production health checks
        run: |
          # Wait for services to be healthy
          sleep 120
          
          # Health check
          curl -f https://api.flourish-app.com/health || exit 1
          
          # API health check
          curl -f https://api.flourish-app.com/api/v1/health || exit 1
          
          # AI services health check
          curl -f https://api.flourish-app.com/api/v1/ai/health || exit 1

      - name: Update frontend deployment
        run: |
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

  # Mobile App Build and Deploy
  build-mobile:
    runs-on: macos-latest
    needs: [test-mobile]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: |
          cd mobile
          npm ci

      - name: Set up EAS CLI
        run: npm install -g @expo/eas-cli

      - name: Build iOS app
        run: |
          cd mobile
          eas build --platform ios --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build Android app
        run: |
          cd mobile
          eas build --platform android --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Submit to app stores
        if: github.ref == 'refs/heads/main'
        run: |
          cd mobile
          # Submit to TestFlight
          eas submit --platform ios --latest
          
          # Submit to Google Play (internal testing)
          eas submit --platform android --latest
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Database Migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run database migrations
        run: |
          cd backend
          flask db upgrade
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          FLASK_ENV: production

  # Post-deployment verification
  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-production, migrate-database]
    
    steps:
      - name: Wait for deployment stabilization
        run: sleep 300

      - name: Run comprehensive health checks
        run: |
          # API health
          curl -f https://api.flourish-app.com/health
          
          # Database connectivity
          curl -f https://api.flourish-app.com/api/v1/health/database
          
          # Redis connectivity
          curl -f https://api.flourish-app.com/api/v1/health/redis
          
          # AI services
          curl -f https://api.flourish-app.com/api/v1/ai/health
          
          # Frontend
          curl -f https://flourish-app.com

      - name: Run smoke tests
        run: |
          # User registration test
          curl -X POST https://api.flourish-app.com/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","password":"testpass123"}'
          
          # AI coaching test
          curl -X POST https://api.flourish-app.com/api/v1/ai/coach \
            -H "Content-Type: application/json" \
            -d '{"message":"Hello Dr. Love"}'

      - name: Performance baseline check
        run: |
          # Check response times
          curl -w "@curl-format.txt" -o /dev/null -s https://api.flourish-app.com/health
          curl -w "@curl-format.txt" -o /dev/null -s https://flourish-app.com

      - name: Notify team of successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#general'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: '🚀 Flourish production deployment successful! All health checks passed.'