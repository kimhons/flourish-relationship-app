name: Deploy Flourish App

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci && cd ..
        cd mobile && npm ci && cd ..
        cd backend && pip install -r requirements.txt && cd ..
    
    - name: Run frontend tests
      run: cd frontend && npm test -- --coverage
    
    - name: Run backend tests
      run: cd backend && python -m pytest tests/ --cov=src
    
    - name: Run mobile tests
      run: cd mobile && npm test -- --coverage

  build-web:
    name: Build Web App
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build:production
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/

  build-backend:
    name: Build Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: flourish-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  build-mobile:
    name: Build Mobile Apps
    needs: test
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/production'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd mobile
        npm ci
    
    - name: Setup Ruby for fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: true
    
    - name: Build iOS app
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
      run: |
        cd mobile/ios
        pod install
        fastlane ios build
    
    - name: Build Android app
      run: |
        cd mobile/android
        ./gradlew bundleRelease
    
    - name: Upload mobile artifacts
      uses: actions/upload-artifact@v3
      with:
        name: mobile-builds
        path: |
          mobile/ios/build/
          mobile/android/app/build/outputs/

  deploy-staging:
    name: Deploy to Staging
    needs: [build-web, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_STAGING }}/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"
    
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster flourish-staging --service flourish-backend --force-new-deployment

  deploy-production:
    name: Deploy to Production
    needs: [build-web, build-backend, build-mobile]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-dist
        path: frontend/dist/
    
    - name: Deploy frontend to S3
      run: |
        aws s3 sync frontend/dist/ s3://${{ secrets.S3_BUCKET_PRODUCTION }}/ --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} --paths "/*"
    
    - name: Update ECS service
      run: |
        aws ecs update-service --cluster flourish-production --service flourish-backend --force-new-deployment
    
    - name: Deploy mobile apps
      run: |
        echo "Mobile apps built and ready for manual upload to stores"
        echo "iOS: Use Transporter or Xcode to upload to App Store Connect"
        echo "Android: Upload AAB to Google Play Console"

  notify:
    name: Notify Deployment Status
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Flourish App deployment ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()